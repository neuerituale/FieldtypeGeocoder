<?php namespace ProcessWire;

/**
 * Collects input for InputfieldGeocoder fields
 * @method string ajaxurl()
 */

class InputfieldGeocoder extends InputfieldWrapper {

	public static function getModuleInfo() {
		return array(
			'title' => 'Geocoder',
			'version' => 103,
			'summary' => 'Inputfield for FieldtypeGeocoder.',
			'href' => 'https://github.com/neuerituale/FieldtypeGeocoder',
			'icon' => 'globe',
			'requires' => 'FieldtypeGeocoder',
		);
	}

	public function __construct() {
		parent::__construct();
		$this->label = 'Geocoder';
	}

	/**
	 * Render inputfield
	 * @return string
	 * @throws WireException
	 */
	public function ___render() {

		if($this->page->template->name === 'admin') {
			$this->prependMarkup = "<script>
				$(function() {
					const jQueryField = $('#{$this->id}');
					if(undefined === jQueryField.data('inputfieldgeocode')) {
						jQueryField.data('inputfieldgeocode', new $.InputfieldGeocode(jQueryField));
					}
			});</script>";
		}

		// Get value and set defaults
		/** @var Geocoder $geocoder */
		$geocoder = $this->attr('value');
		$this->attr('value', '');

		if(!($geocoder instanceof Geocoder)) $geocoder = new Geocoder();
		if(is_null($this->get('hasFieldtype'))) $this->set('hasFieldtype', $this->modules->get('FieldtypeGeocoder'));

		// Add Subfields
		$this->add([
			'type' => 'Text',
			'name' => $this->attr('name') . '_query',
			'themeBorder' => 'none',
			'class' => 'InputfieldGeocoderQuery InputfieldGeocoderAutocomplete',
			'value' => $geocoder->query,
			'useLanguages' => false,
			'skipLabel' => Inputfield::skipLabelMarkup,
			'collapsed' => Inputfield::collapsedNever,
			'prependMarkup' => "<span class='InputfieldGeocoderAutocompleteStatus'><i class='fa fa-fw fa-angle-double-right'></i></span> <button type='button' class='InputfieldGeocoderAutocompleteClear'><i class='fa fa-fw fa-trash'></i></button>",
			'appendMarkup' => "<span class='InputfieldGeocoderLatlng'></span>"
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_formatted',
			'class' => 'InputfieldGeocoderFormatted',
			'value' => $geocoder->formatted
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_provider',
			'class' => 'InputfieldGeocoderProvider',
			'value' => $geocoder->provider
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_status',
			'class' => 'InputfieldGeocoderStatus',
			'value' => $geocoder->status
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_lat',
			'class' => 'InputfieldGeocoderLat',
			'value' => is_numeric($geocoder->lat) ? json_encode($geocoder->lat) : ''
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_lng',
			'class' => 'InputfieldGeocoderLng',
			'value' => is_numeric($geocoder->lng) ? json_encode($geocoder->lng) : ''
		]);

		$this->add([
			'type' => 'Hidden',
			'name' => $this->attr('name') . '_geojson',
			'class' => 'InputfieldGeocoderGeojson',
			'value' => $geocoder->geodata ? json_encode($geocoder->geodata) : '{}'
		]);

		// Add notes or preview and set initial description value
		$this->appendMarkup("<div class='InputfieldGeocoderPreview'></div>");
		$queryField = $this->get($this->attr('name') . '_query');

		if($geocoder->hasStatus(Geocoder::statusNotFound)) $queryField->description = '*' . __('Geoinformation not found') . '*';
		else if(strlen($geocoder->formatted)) $queryField->description = $geocoder->formatted;
		else $queryField->description = '*' . __('Start typing address for searching ...') . '*';

		// default center
		// ?? suppress errors in php 7
		$defaultCenter = [
			$this->hasField->center['lat'] ?? 0,
			$this->hasField->center['lng'] ?? 0
		];

		// Set additional settings
		$this->wrapAttr('data-ajaxurl', $this->ajaxurl());
		$this->wrapAttr('data-defaultcenter', json_encode($defaultCenter));
		$this->wrapAttr('data-notfound', __('Geoinformation not found'));
		$this->wrapAttr('data-apply', __('Apply'));

		// Render
		return parent::___render();
	}

	/**
	 * Process input
	 * @param WireInputData $input
	 * @return InputfieldGeocoder|void
	 */
	public function ___processInput(WireInputData $input) {

		/** @var Geocoder $geocoder */
		$geocoder = $this->attr('value');

		if(!($geocoder instanceof Geocoder)) {
			$geocoder = new Geocoder();
			$this->attr('value', $geocoder);
		}

		$geocoder->setArray([
			'status' => $input->int($this->attr('name') . '_status'),
			'formatted' => $input->text($this->attr('name') . '_formatted'),
			'query' => $input->text($this->attr('name') . '_query'),
			'geodata' => json_decode($input->get($this->attr('name') . '_geojson'), JSON_OBJECT_AS_ARRAY),
			'lat' => $input->get($this->attr('name') . '_lat'), // will be sanitized in setter method
			'lng' => $input->get($this->attr('name') . '_lng'), // will be sanitized in setter method
			'provider' => $input->text($this->attr('name') . '_provider')
		]);

		// propagate change to field
		if($geocoder->isChanged()) $this->trackChange('value');

		return $this;

	}

	/**
	 * @param $path
	 * @return mixed
	 * @throws WireException
	 */
	public function sanitizePath($path) {
		if(strpos($path, '//') === false) $path = $this->config->urls->root . ltrim($path, '/');
		return $this->wire('sanitizer')->entities($path);
	}

	/**
	 * Get the ajax url (hookable)
	 * @return string
	 */
	public function ___ajaxurl() {
		return $this->config->urls->admin . 'page/search/live/';
	}

	/**
	 * Field Config
	 *
	 * @param Field $field
	 * @return InputfieldWrapper
	 * @throws WireException
	 * @throws WirePermissionException
	 */
	public function ___getConfigInputfields() {

		$value = new Geocoder();

		if($this->has('hasField')) {
			$field = $this->get('hasField');
			if($field->has('center')) $value->setArray( $this->get('hasField')->get('center') );
		}

		// defaults
		$inputfields = parent::___getConfigInputfields();

		$inputfields->add([
			'type' => 'geocoder',
			'name' => 'center',
			'label' => __('Default center'),
			'value' => $value
		]);

		return $inputfields;
	}
}

